@{
    ViewData["Title"] = "Quotation List";
}
@model QuotationSystem.Models.Quotation.QuotationViewModel
<div class="p-3 pt-5">
    <div class="d-flex flex-column" style="gap:1rem">
        <!--Search form-->
        <form class="d-flex" style="gap:1rem;">
            <div class="d-flex align-items-center text-nowrap" style="gap:.5rem;">
                <div>Quotaition No.:</div>
                <input class="form-control" type="text" />
            </div>

            <div class="d-flex align-items-center" style="gap:.5rem;">
                <div>Date:</div>
                <input class="form-control" type="date" />
                <div>to</div>
                <input class="form-control" type="date" />
            </div>

            <div class="d-flex align-items-center" style="gap:.5rem;">
                <div>Customer:</div>
                <input class="form-control" type="text" />
            </div>

            <button class="btn btn-success" id="search-button"><i class="fa-solid fa-magnifying-glass"></i></button>
        </form>

        <!--Add Button-->
        <div class="d-flex w-100 justify-content-end">
            <button class="btn btn-primary" data-toggle="modal" data-target="#addQuotationModal"><i class="fa-solid fa-plus"></i>Add New</button>
        </div>
        <!--Modal-->
        <partial name="_AddQuotationPartial" model="Model" />
        <div id="edit-quotation">
        </div>

        <!--table-->
        <div class="table-responsive ibox-content">
            <table id="quotation-table" class="table table-bordered table-hover table-striped" style="width:100%;" cellspacing="0"></table>
        </div>
    </div>
</div>
@section Scripts{
    <script>
        $(document).ready(() => {
            var colOptions = [
                { title: "No", className: "text-center", render: (data, type, row, meta) => meta.row + meta.settings._iDisplayStart + 1, className: "text-center" },
                { title: "Date", data: "createDate", className: "text-center" },
                { title: "Quotation No.", data: "quotationNo", className: "text-center" },
                { title: "Customer", data: "customerName", className: "text-center"},
                { title: "Seller", data: "seller", className: "text-center" },
                { title: "Total", data: "total", className: "text-center" },
                { title: "Grand Total", data: "grandTotal", className: "text-center" },
                { title: "Status", data: "activeStatus", className: "text-center", render: renderActiveStatus },
                { title: "Action", data: "quotationNo", className: "text-center", render: renderActionButtons }
            ];
            table = $('#quotation-table').DataTable({
                "processing": true,
                "serverSide": true,
                "autoWidth": true,
                "bLengthChange": false,
                "bFilter": true,
                "searching": false,
                "pageLength": 15,
                "displayStart": 0,
                "ajax": {
                    url: "@Url.Action("Search")",
                    type: "POST",
                    data: (opt) => {
                        console.log($('#search-criteria').serializeToJSON());
                        //console.table(opt);
                        return {
                            itemCode: `${$('#textId').val()}`,
                            itemName: `${$('#textName').val()}`,
                            option: opt
                        };
                    },
                    error: handlerDataTableError
                },
                "columns": colOptions,
            });
            $(window).trigger('resize');
            $("#search-button").click(() => {
                table.ajax.reload();
            });

            $("#quotationForm").validate({
                rules: {
                    textCusName: { required: true, minlength: 1, maxlength: 30 },
                    textCusAddress: { required: true, minlength: 1, maxlength: 150 },
                    textCusContact: { required: true, minlength: 1, maxlength: 30 },
                    textTaxId: { required: true, minlength: 1, maxlength: 30 },
                    textSellerName: { required: true, minlength: 1, maxlength: 30 },
                    textItemCode: { required: true, minlength: 9, maxlength: 9 },
                    textQty: { required: true, minlength: 1, maxlength: 30 },
                    textDiscount: { required: true, minlength: 1, maxlength: 30 },
                    textCusAddress: { required: true, minlength: 1, maxlength: 30 },
                },
                messages: {
                    textCusName: { required: "Please enter the customer name." },
                }
            });

            $('#saveQuotationBtn').on('click', () => {
                // Manually trigger the form validation
                if ($("#quotationForm").valid()) {
                    // If the form is valid, call the submitQuotationForm function
                    submitQuotationForm();
                }
            });
        });

        function renderActionButtons(data, type, row) {
            if (row.activeStatus === 'Y') {
                return `<div class="d-flex justify-content-center" style="gap:.5rem">
                            <button class="btn btn-primary" onclick="getEditQuotationModal('${data}')"> <i class="fa-regular fa-pen-to-square"></i></button>
                            <button class="btn btn-outline-success" onclick="previewQuotation('${data}')"><i class="fa fa-file-text"></i></button>
                        </div>`;
            }
            return `<div class="d-flex justify-content-center" style="gap:.5rem">
                        <button class="btn btn-primary" onclick="getEditQuotationModal('${data}')"> <i class="fa-regular fa-pen-to-square"></i></button>
                        <button class="btn btn-danger" onclick="deleteQuotation('${data}')"><i class="fa-solid fa-trash-can"></i></button>
                        <button class="btn btn-outline-success" onclick="previewQuotation('${data}')"><i class="fa fa-file-text"></i></button>
                     </div>`;
        }
        function renderActiveStatus(data, type, row) {
            return data == 'Y' ? '<div class="text-success">Active</div>' : '<div class="text-danger">Inactive</div>';
        }
        function getEditQuotationModal(itemCode) {
            $.ajax({
                url: '@Url.Action("GetEditQuotationModal")',
                type: 'POST',
                data: { itemCode: itemCode },
                success: (result) => {
                    $("#edit-quotation").html(result);
                    $("#editQuotationModal").modal("show");
                },
                error: (data) => {
                    console.log(data);
                }
            });
        }
        function getDeleteQuotationModal(itemCode) {
            $.ajax({
                url: '@Url.Action("GetDeleteQuotationModal")',
                type: 'POST',
                data: { itemCode: itemCode },
                success: (result) => {
                    $("#delete-item").html(result);
                    $("#deleteItemModal").modal("show");
                }
            });
        }
        function deleteQuotation(quotationNo) {
            Swal.fire({
                title: 'Do you want to delete this quotation?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes',
                denyButtonText: `No`,
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("DeleteQuotation")',
                        type: 'POST',
                        data: { quotationNo: quotationNo },
                        success: (result) => {
                            console.log(result);
                            Swal.fire('Deleted!', '', 'success')
                                .then(() => {
                                    location.reload();
                                });
                        },
                        error: (data) => {
                            console.log(data);
                            Swal.fire('Error','Something went wrong, Please try again','error')
                        }
                    });
                }
            });
        }

        function previewQuotation(id) {
            location.href = `/Quotation/PreviewQuotation?quotationNo=${id}`;
        }

        function handlerDataTableError(xhr, error, code) {
            var isUnauthorized = code === "Unauthorized";
            if (isUnauthorized) {
                alert("Session Timeout");
            }
        }

        function submitQuotationForm() {
            let itemList = new Array();
            $("#item-table").find(".item-row").each((index, element) => { //don't remove index, it's magic!
                let $element = $(element);  // Convert it into a jQuery object, **javascript magic, u can't understand it**
                let itemCode = $element.find("td:eq(1) input").val();
                let itemName = $element.find("td:eq(2) input").val();
                let itemDesc = $element.find("td:eq(3) input").val();
                let Qty = $element.find("td:eq(4) input").val();
                let unitId = $element.find("td:eq(5) input").val();
                let unitPrice = $element.find("td:eq(6) input").val();
                let discount = $element.find("td:eq(7) input").val();
                let total = $element.find("td:eq(8) input").val();

                let QuotationItemViewModel = {
                    itemCode: itemCode,
                    itemName: itemName,
                    itemDesc: itemDesc,
                    Qty: Qty,
                    unitId: unitId,
                    unitPrice: unitPrice,
                    discount: discount,
                    total: total
                };
                itemList.push(QuotationItemViewModel);
            });
            let model = {
                quotationNo: $('#textQuotationNo').val(),
                customer: $('#textCusName').val(),
                customerAddress: $('#textCusAddress').val(),
                customerContact: $('#textCusContact').val(),
                taxId: $('#textTaxId').val(),
                salesName: $('#textSellerName').val(),
                vat: $('#textVat').val(),
                activeStatus: $('#activeCheckbox').prop('checked') ? 'Y' : 'N',
            }
            $.ajax({
                url: '@Url.Action("AddQuotation")',
                type: 'POST',
                data: {
                    model: model,
                    itemList: itemList
                },
                success: (data, textStatus) => {
                    console.log(data);
                    //window.location.href = `@Url.Action("PreviewQuotation","Quotation")?quotationNo=${model.quotationNo}`;
                },
                complete: (result) => {
                    let data = result.responseJSON;
                    console.log(data);
                    if (data.isSuccess) {
                        $("#addQuotationModal").modal("hide");
                         swal.fire({
                             title: 'Successfully added!',
                             icon: 'success'
                         }).then(() => {
                             location.href = `/Quotation/PreviewQuotation?quotationNo=${id}`;
                         });
                     }
                     else {
                        swal.fire({
                            title: 'Error',
                            text: 'Something went wrong',
                            icon: 'error'
                        })
                     }
                }
            });
        }

    </script>

    <script>
        let lineNo = 2;
        $(document).ready(() => {
            $("#btnAddRow").click(() => {
                markup = `
                        <tr class="item-row">
                            <td>${lineNo}</td>
                            <td><input class="form-control" type="text" name="textItemCode" /></td>
                            <td><input class="form-control" type="text" name="textItemName" readonly/></td>
                            <td><input class="form-control" type="text" name="textDescription" readonly/></td>
                            <td><input class="form-control" type="number" name="textQty" min="0" /></td>
                            <td><input class="form-control" type="text" name="textUnit" readonly/></td>
                            <td><input class="form-control" type="text" name="textUnitPrice" readonly/></td>
                            <td><input class="form-control" type="number" name="textDiscount" min="0" /></td>
                            <td><input class="form-control" type="number" name="textTotal" min="0" readonly/></td>
                            <td><button type="button" class="deleteBtn btn btn-outline-danger"><i class="fa fa-xmark"></i></button></td>
                        </tr>`;
                console.log("button clicked");
                tableBody = $("#item-table tr:nth-last-child(2)");
                tableBody.after(markup);
                lineNo++;
            });

            $("#item-table").on('click', '.deleteBtn', (event) => {
                console.log('delete button clicked');
                $(event.target).closest("tr").remove();
                lineNo = 2;
            });

            function fetchItemDetails(itemCode, row) {
                $.ajax({
                    url: '@Url.Action("GetItemDetailById")',
                    method: 'POST',
                    data: { itemCode: itemCode },
                    success: function (data) {
                        console.log(data);
                        row.find('input[name="textItemName"]').val(data.itemName);
                        row.find('input[name="textDescription"]').val(data.itemDesc);
                        row.find('input[name="textUnit"]').val(data.unitId);
                        const formattedUnitPrice = data.unitPrice.toLocaleString();
                        row.find('input[name="textUnitPrice"]').val(formattedUnitPrice);
                    },
                    error: function (error) {
                        // Handle error if the API call fails
                        console.error('Error fetching item details:', error);
                    }
                });
            }
            let timer;
            $("#item-table").on('change', 'input[name="textItemCode"]', function () {
                const itemCode = $(this).val();
                const row = $(this).closest("tr");

                // Clear the previous timer (if any) before setting a new one
                clearTimeout(timer);

                // Set a new timer to introduce a delay of 500ms before fetching the input value
                timer = setTimeout(() => {
                    fetchItemDetails(itemCode, row);
                }, 500);
            });
        });
    </script>
}